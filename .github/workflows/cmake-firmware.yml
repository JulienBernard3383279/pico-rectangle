name: CMake Firmware

on:
  push:
  pull_request:
    types: [opened, edited, closed, reopened]

env:
  PICO_SDK_DIR: ./pico-sdk

jobs:
  build:
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
      # os: [ubuntu-latest, windows-latest]
        os: [ubuntu-latest]

    steps:
    - uses: actions/checkout@v2
      name: Checkout repository
      with:
        ref: ${{ github.event.pull_request.head.sha }}
    - uses: actions/checkout@master
      name: Checkout pico sdk
      with:
        repository: raspberrypi/pico-sdk
        path: ${{ env.PICO_SDK_DIR }}
    # From https://docs.google.com/document/d/1-Lx3X7zIwRscp6N76_usy5fdwulo6-chML3Xjfz3zaY/
    # CMake assumes the sdk path is relative to the `build` directory.
    - name: Set pico-sdk path in CMakeLists.
      run: |
        sed 's/#set(PICO_SDK_PATH "..\/..\/pico-sdk"/set(PICO_SDK_PATH "..\/pico-sdk"/' -i CMakeLists.txt
        cat CMakeLists.txt

    # From https://datasheets.raspberrypi.com/pico/getting-started-with-pico.pdf
    - name: Update apt and install cmake
      run: |
        sudo apt update -y
        sudo apt install -y cmake gcc-arm-none-eabi libnewlib-arm-none-eabi build-essential

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{github.workspace}}/build

    - name: CMake and Make the Firmware
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      # run: cmake --build . --config $BUILD_TYPE
      # From Step 3: https://docs.google.com/document/d/1-Lx3X7zIwRscp6N76_usy5fdwulo6-chML3Xjfz3zaY/edit
      run: |
        cmake .. 
        make

    - name: List things
      working-directory: ${{github.workspace}}/build
      run: ls -laR
